Feature: Extract product details from JSON in d_product_revenue table

  In order to analyze product specifications and regulatory compliance,
  As a data engineer,
  I need to extract specific fields from the JSON string in the product_details column of d_product_revenue table.

  Background:
    Given the purgo_playground.d_product_revenue table contains product_details as JSON strings

  Scenario: Extract fields from JSON - Happy Path
    Given a JSON string with the structure:
      """
      {
        "batch_number": "BATCH2024-5678",
        "expiration_date": "2025-12-31",
        "manufacturing_site": "Site A",
        "regulatory_approval": "Approved",
        "price": 250.75
      }
      """
    When a query is executed to extract fields from product_details
    Then the extracted fields should include:
      | batch_number               | expiration_date | manufacturing_site | regulatory_approval | price |
      | "BATCH2024-5678"           | "2025-12-31"    | "Site A"           | "Approved"          | 250.75|

    Examples:
      | JSON structure                                                                                           |
      | {"batch_number":"BATCH2024-5678","expiration_date":"2025-12-31","manufacturing_site":"Site A","regulatory_approval":"Approved","price":250.75} |

  Scenario: Extract fields with missing data - Error Handling Scenario
    Given a JSON string with the structure:
      """
      {
        "batch_number": "BATCH2024-5678",
        "expiration_date": null,
        "manufacturing_site": "Site A",
        "regulatory_approval": "Approved",
        "price": 250.75
      }
      """
    When a query is executed to extract fields from product_details
    Then an error message should display:
      | Error Condition                  | Message                    |
      | Missing expiration_date field    | "Expiration date missing"  |
      | Null expiration_date field       | "Expiration date cannot be null" |

  Scenario Outline: Data-driven extraction for multiple JSON strings
    Given a JSON structure within product_details: <json_string>
    When the SQL query is executed
    Then the extracted fields should match:
      | batch_number    | expiration_date | manufacturing_site | regulatory_approval | price |
      | <batch_number>  | <expiration_date>| <manufacturing_site>| <regulatory_approval>| <price>|

    Examples:
      | json_string                                                                                                                                             | batch_number     | expiration_date | manufacturing_site | regulatory_approval | price |
      | {"batch_number":"BATCH2024-5678","expiration_date":"2025-12-31","manufacturing_site":"Site A","regulatory_approval":"Approved","price":250.75}        | "BATCH2024-5678" | "2025-12-31"   | "Site A"           | "Approved"          | 250.75|
      | {"batch_number":"BATCH2024-5679","expiration_date":"2024-06-30","manufacturing_site":"Site B","regulatory_approval":"Pending","price":300.99}        | "BATCH2024-5679" | "2024-06-30"   | "Site B"           | "Pending"           | 300.99|

  Technical Details:
    - Data Format: JSON string with keys batch_number, expiration_date, manufacturing_site, regulatory_approval, and price.
    - Validation: Ensure non-null and valid format for each field, especially dates.
    - Error Handling: Display appropriate error messages for missing or null fields.
    - Query Pattern:
      """sql
      SELECT
        get_json_object(product_details, '$.batch_number') AS batch_number,
        get_json_object(product_details, '$.expiration_date') AS expiration_date,
        get_json_object(product_details, '$.manufacturing_site') AS manufacturing_site,
        get_json_object(product_details, '$.regulatory_approval') AS regulatory_approval,
        get_json_object(product_details, '$.price') AS price
      FROM
        purgo_playground.d_product_revenue
      WHERE
        product_details IS NOT NULL
      """

