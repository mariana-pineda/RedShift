Feature: Extract and Transform Product Details from JSON Strings in d_product_revenue Table

  Background:
    Given the d_product_revenue table exists in the {{purgo_playground}} namespace
      And the table includes a product_details JSON string column

  Scenario: Extract individual fields from product_details JSON string
    Given a row in the d_product_revenue table has product_details JSON as
      | JSON_String                                                                              |
      | {"batch_number": "BATCH2024-5678", "expiration_date": "2025-12-31", "manufacturing_site": "Site A", "regulatory_approval": "Approved", "price": 250.75} |
    When the SQL query is executed to extract each field
    Then the query should select
      | batch_number       | expiration_date | manufacturing_site | regulatory_approval | price  |
      | "BATCH2024-5678"   | "2025-12-31"    | "Site A"           | "Approved"          | 250.75 |

  Scenario Outline: Validate extraction of fields with various data inputs
    Given a product_details JSON with <input_JSON>
    When the SQL query is executed
    Then each field should be extracted as follows
      | batch_number | expiration_date | manufacturing_site | regulatory_approval | price |
      | <batchNumber> | <expirationDate> | <manufacturingSite> | <regulatoryApproval> | <price> |

    Examples:
      | input_JSON                                                                                                      | batchNumber     | expirationDate | manufacturingSite | regulatoryApproval | price  |
      | {"batch_number": "BATCH2024-5678", "expiration_date": "2025-12-31", "manufacturing_site": "Site A", "regulatory_approval": "Approved", "price": 250.75} | BATCH2024-5678  | 2025-12-31     | Site A            | Approved           | 250.75 |
      | {"batch_number": "BATCH2025-1234", "expiration_date": "2026-06-15", "manufacturing_site": "Site B", "regulatory_approval": "Pending", "price": 199.99} | BATCH2025-1234  | 2026-06-15     | Site B            | Pending            | 199.99 |

  Scenario: Handle null or missing fields in product_details JSON
    Given product_details JSON may have NULL fields
    When a JSON field is missing from input_JSON
    Then it should return NULL for that field in the query output

  Scenario: Error handling when JSON string is malformed
    Given a malformed JSON string in product_details column
    When the SQL query is executed
    Then an error with message "Malformed JSON" should be returned

  Scenario Outline: Extraction with expected data types and formats
    Given product_details JSON includes data in specified formats
    When the SQL query is executed
    Then data should be cast to correct types:
      | Field                | Expected Format | Data Type |
      | batch_number         | String          | VARCHAR   |
      | expiration_date      | Date            | DATE      |
      | manufacturing_site   | String          | VARCHAR   |
      | regulatory_approval  | String          | VARCHAR   |
      | price                | Decimal         | DECIMAL   |

  # SQL Query for extracting fields (as per the given requirements):
  #
  # SELECT 
  #   get_json_object(product_details, '$.batch_number') AS batch_number,
  #   get_json_object(product_details, '$.expiration_date') AS expiration_date,
  #   get_json_object(product_details, '$.manufacturing_site') AS manufacturing_site,
  #   get_json_object(product_details, '$.regulatory_approval') AS regulatory_approval,
  #   get_json_object(product_details, '$.price') AS price
  # FROM {{purgo_playground.d_product_revenue}};
